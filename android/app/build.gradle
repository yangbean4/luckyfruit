def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'com.google.gms.google-services'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    compileSdkVersion 28

    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "goodluck.lucky.money.mergegarden.win.cash"
        minSdkVersion 19
        targetSdkVersion 28
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        multiDexEnabled true

        ndk {
            //选择要添加的对应cpu类型的.so库。
            // 还可以添加 'x86', 'x86_64', 'mips', 'mips64' //'armeabi-v7a',  'arm64-v8a'
            abiFilters 'arm64-v8a', 'armeabi-v7a', "armeabi", "x86"

            //abiFilters 就是过滤.so文件的方法；
            //如上配置就能让你的项目只打包armeabi的库文件；其他依赖module同样配置，最终效果就是你的app只适配armeabi CPU的机型；
            //打包的APK文件 libs下只有 armeabi的so文件；
        }
    }
    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
            storePassword keystoreProperties['storePassword']
        }
    }
    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.

            signingConfig signingConfigs.release

            minifyEnabled true
            useProguard true

            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

flutter {
    source '../..'
}

repositories {
    // Add the following repositories
    maven { url 'https://chartboostmobile.bintray.com/Chartboost' }
}

dependencies {
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    implementation 'com.google.firebase:firebase-analytics:17.3.0'
    implementation 'com.google.firebase:firebase-messaging:20.1.4'
    implementation 'com.google.firebase:firebase-dynamic-links:19.1.0'
    implementation 'cn.thinkingdata.android:ThinkingAnalyticsSDK:2.5.1'
    implementation 'com.android.support:multidex:1.0.3'
    implementation('com.mopub:mopub-sdk-rewardedvideo:5.8.0@aar') {
        transitive = true
        exclude module: 'libAvid-mopub' // To exclude AVID
        exclude module: 'moat-mobile-app-kit' // To exclude Moat
    }

    // Chartboost
    implementation 'com.chartboost:chartboost-sdk:8.0.2'
    implementation 'com.mopub.mediation:chartboost:8.0.2.0'

    // Facebook Audience Network
    implementation 'com.facebook.android:audience-network-sdk:5.8.0'
    implementation 'com.mopub.mediation:facebookaudiencenetwork:5.8.0.0'

    // Google (AdMob & Ad Manager)
    implementation 'com.google.android.gms:play-services-ads:19.0.1'
    implementation 'com.mopub.mediation:admob:19.0.1.0'

    // Unity Ads
    implementation 'com.unity3d.ads:unity-ads:3.4.2'
    implementation 'com.mopub.mediation:unityads:3.4.2.0'

    // AppLovin
    implementation 'com.applovin:applovin-sdk:9.12.2'
    implementation 'com.mopub.mediation:applovin:9.12.2.0'

    // Facebook 分析SDK
    implementation 'com.facebook.android:facebook-android-sdk:[5,6)'

    implementation 'com.facebook.android:facebook-share:[5,6)'
    implementation 'com.facebook.android:facebook-messenger:[5,6)'

    // Adjust
    implementation 'com.google.android.gms:play-services-ads-identifier:17.0.0'
    implementation 'com.google.android.gms:play-services-analytics:17.0.0'
    implementation 'com.adjust.sdk:adjust-android:4.21.1'
    implementation 'com.android.installreferrer:installreferrer:1.1.2'

}
